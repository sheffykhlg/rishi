import logging
from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes
import asyncio

from config import ADMIN_ID
from database import admin_settings, users_collection

logger = logging.getLogger(__name__)

# Decorator to check if the user is an admin
def admin_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚õîÔ∏è ‡§Æ‡§æ‡§´ ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

@admin_only
async def set_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        channel_id = int(context.args[0])
        admin_settings.update_one(
            {"_id": 1},
            {"$set": {"channel_id": channel_id}},
            upsert=True
        )
        await update.message.reply_text(f"‚úÖ ‡§ö‡•à‡§®‡§≤ ID `{channel_id}` ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡•á‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç: `/setch <channel_id>`")

@admin_only
async def my_set_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    settings = admin_settings.find_one({"_id": 1})
    channel_id = settings.get("channel_id") if settings else None
    if channel_id:
        await update.message.reply_text(f"‚ÑπÔ∏è ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§ö‡•à‡§®‡§≤ ID ‡§π‡•à: `{channel_id}`")
    else:
        await update.message.reply_text("‚ÑπÔ∏è ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ `/setch` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§")

@admin_only
async def set_domain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        domain = context.args[0]
        admin_settings.update_one(
            {"_id": 1},
            {"$set": {"shortener_domain": domain}},
            upsert=True
        )
        await update.message.reply_text(f"‚úÖ Shortener ‡§°‡•ã‡§Æ‡•á‡§® `{domain}` ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡•á‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
    except IndexError:
        await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç: `/setdomain <domain.com>`")

@admin_only
async def set_api(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        api_key = context.args[0]
        admin_settings.update_one(
            {"_id": 1},
            {"$set": {"shortener_api": api_key}},
            upsert=True
        )
        await update.message.reply_text("‚úÖ Shortener API ‡§ï‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡•á‡§ü ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§")
    except IndexError:
        await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç: `/setapi <api_key>`")

@admin_only
async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü: `/settime <number> <unit>`\nUnit: `s`, `m`, `h`, `d` (seconds, minutes, hours, days)")
        return
    try:
        value = int(context.args[0])
        unit = context.args[1].lower()
        
        seconds = 0
        if unit == 's':
            seconds = value
        elif unit == 'm':
            seconds = value * 60
        elif unit == 'h':
            seconds = value * 3600
        elif unit == 'd':
            seconds = value * 86400
        else:
            await update.message.reply_text("‚ö†Ô∏è ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡•Ç‡§®‡§ø‡§ü! ‡§ï‡•É‡§™‡§Ø‡§æ `s`, `m`, `h`, or `d` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§")
            return

        admin_settings.update_one(
            {"_id": 1},
            {"$set": {"invite_duration_seconds": seconds}},
            upsert=True
        )
        await update.message.reply_text(f"‚úÖ ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•Ä ‡§µ‡•à‡§ß‡§§‡§æ `{value} {unit}` ({seconds} ‡§∏‡•á‡§ï‡§Ç‡§°) ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü! `/settime <number> <unit>` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§")

@admin_only
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_count = users_collection.count_documents({})
    await update.message.reply_text(f"üìä ‡§¨‡•â‡§ü ‡§ï‡•á ‡§ï‡•Å‡§≤ ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏: **{user_count}**")

@admin_only
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≤‡§ø‡§ñ‡•á‡§Ç: `/broadcast <message>`")
        return
    
    message_to_send = " ".join(context.args)
    
    all_users_cursor = users_collection.find({}, {"_id": 1})
    all_user_ids = [user["_id"] for user in all_users_cursor]
    
    if not all_user_ids:
        await update.message.reply_text("Broadcast ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§Ø‡•Ç‡§ú‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
        return

    total_users = len(all_user_ids)
    sent_count = 0
    failed_count = 0
    
    status_message = await update.message.reply_text(f"üì£ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à... 0/{total_users} ‡§ï‡•ã ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ‡•§")
    
    for i, user_id in enumerate(all_user_ids):
        try:
            await context.bot.send_message(chat_id=user_id, text=message_to_send, parse_mode='HTML')
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logger.warning(f"User {user_id} ‡§ï‡•ã broadcast ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: {e}")
        
        if (i + 1) % 10 == 0 or (i + 1) == total_users:
            progress = (i + 1) / total_users
            bar_length = 10
            filled_length = int(bar_length * progress)
            bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
            
            try:
                await status_message.edit_text(
                    f"üì£ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§ú‡§æ‡§∞‡•Ä ‡§π‡•à...\n`{bar}`\n"
                    f"‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ: {sent_count}/{total_users}\n"
                    f"‡§µ‡§ø‡§´‡§≤: {failed_count}",
                    parse_mode='MarkdownV2'
                )
            except Exception:
                pass
        await asyncio.sleep(0.1)

    await status_message.edit_text(
        f"‚úÖ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!\n\n"
        f"‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ: {sent_count}\n"
        f"‡§µ‡§ø‡§´‡§≤ ‡§π‡•Å‡§è: {failed_count}"
    )
