import logging
import time
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError

from database import admin_settings, users_collection, get_admin_settings
from shortener import shorten_link
from jobs import remove_member_job

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        # User ko DB me add ya get karna
        user = users_collection.find_one({"_id": user_id})
        if not user:
            users_collection.insert_one({
                "_id": user_id,
                "has_received_free_link": False,
                "last_link_timestamp": None
            })
            user = users_collection.find_one({"_id": user_id})
            logger.info(f"Naya user database me add hua: {user_id}")

        # Admin settings get karna
        settings = get_admin_settings()
        channel_id = settings.get("channel_id")

        if not channel_id:
            await update.message.reply_text("‚ö†Ô∏è ‡§Æ‡§æ‡§´ ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡•á ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§")
            return

        # Bot ko channel me admin permissions hai ya nahi, check karna
        try:
            bot_member = await context.bot.get_chat_member(channel_id, context.bot.id)
            if not bot_member.status == 'administrator' or not bot_member.can_invite_users or not bot_member.can_restrict_members:
                await update.message.reply_text("‚ö†Ô∏è ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ (Invite & Ban) ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§")
                return
        except TelegramError as e:
            await update.message.reply_text(f"‚ö†Ô∏è ‡§ö‡•à‡§®‡§≤ (`{channel_id}`) ‡§ï‡•ã ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ: {e.message}")
            logger.error(f"Channel access error for {channel_id}: {e}")
            return
            
        # Invite link generate karna
        expire_date = datetime.now() + timedelta(minutes=5)
        invite_link_obj = await context.bot.create_chat_invite_link(
            chat_id=channel_id,
            expire_date=expire_date,
            member_limit=1
        )
        invite_link = invite_link_obj.invite_link
        
        duration_seconds = settings.get("invite_duration_seconds", 86400)
        
        # User ko link dena
        if not user.get("has_received_free_link"):
            # Pehli baar: Free link
            update_data = {"$set": {"has_received_free_link": True, "last_link_timestamp": time.time()}}
            
            keyboard = [[InlineKeyboardButton("üîó ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç (Free)", url=invite_link)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üéâ ‡§Ü‡§™‡§ï‡§æ ‡§´‡•ç‡§∞‡•Ä ‡§ö‡•à‡§®‡§≤ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§≤‡§ø‡§Ç‡§ï ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à! ‡§Ø‡§π ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•á‡§µ‡§≤ ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à ‡§î‡§∞ ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ‡•§",
                reply_markup=reply_markup
            )
        else:
            # Dusri baar: Shortened link
            shortener_domain = settings.get("shortener_domain")
            shortener_api = settings.get("shortener_api")
            
            if not shortener_domain or not shortener_api:
                await update.message.reply_text("‚ö†Ô∏è ‡§Æ‡§æ‡§´ ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡•á ‡§Ö‡§≠‡•Ä ‡§§‡§ï shortener service ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡•Ä ‡§π‡•à‡•§")
                return

            await update.message.reply_text("‚è≥ ‡§Ü‡§™‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç...")
            
            shortened_link = await shorten_link(shortener_domain, shortener_api, invite_link)
            
            if shortened_link:
                keyboard = [[InlineKeyboardButton("üîó ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§™‡§® ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç", url=shortened_link)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "‡§Ø‡§π ‡§∞‡§π‡§æ ‡§Ü‡§™‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï‡•§ ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§™‡§® ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§",
                    reply_markup=reply_markup
                )
                update_data = {"$set": {"last_link_timestamp": time.time()}}
            else:
                await update.message.reply_text("‚ùå ‡§≤‡§ø‡§Ç‡§ï ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")
                return

        # User ko remove karne ke liye job schedule karna
        context.job_queue.run_once(
            remove_member_job,
            when=duration_seconds,
            data={"user_id": user_id, "channel_id": channel_id},
            name=f"remove_{user_id}_{channel_id}"
        )
        
        users_collection.update_one({"_id": user_id}, update_data)
        logger.info(f"User {user_id} ke liye {duration_seconds}s ka removal job schedule kiya gaya.")

    except Exception as e:
        logger.error(f"Start command me error: {e}", exc_info=True)
        await update.message.reply_text("ü§ñ ‡§ï‡•Å‡§õ ‡§Ü‡§Ç‡§§‡§∞‡§ø‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§")
